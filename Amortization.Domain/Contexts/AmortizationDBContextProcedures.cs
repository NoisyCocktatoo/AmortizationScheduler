// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Amortization.Domain.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Amortization.Domain.Contexts
{
    public partial class AmortizationDBContext
    {
        private IAmortizationDBContextProcedures _procedures;

        public virtual IAmortizationDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AmortizationDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAmortizationDBContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetDashboardDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetspUnitInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spAmortizationScheduleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetAllBuyerTransactionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetAllLoanListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetBuyerInformationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetLoanerDropdownResult>().HasNoKey().ToView(null);
        }
    }

    public partial class AmortizationDBContextProcedures : IAmortizationDBContextProcedures
    {
        private readonly AmortizationDBContext _context;

        public AmortizationDBContextProcedures(AmortizationDBContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetDashboardDataResult>> GetDashboardDataAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDashboardDataResult>("EXEC @returnValue = [dbo].[GetDashboardData]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetspUnitInfoResult>> GetspUnitInfoAsync(long? ProjectId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ProjectId",
                    Value = ProjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetspUnitInfoResult>("EXEC @returnValue = [dbo].[GetspUnitInfo] @ProjectId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spAmortizationScheduleResult>> spAmortizationScheduleAsync(long? LoanId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LoanId",
                    Value = LoanId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spAmortizationScheduleResult>("EXEC @returnValue = [dbo].[spAmortizationSchedule] @LoanId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetAllBuyerTransactionsResult>> spGetAllBuyerTransactionsAsync(long? BuyerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BuyerId",
                    Value = BuyerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetAllBuyerTransactionsResult>("EXEC @returnValue = [dbo].[spGetAllBuyerTransactions] @BuyerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetAllLoanListResult>> spGetAllLoanListAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetAllLoanListResult>("EXEC @returnValue = [dbo].[spGetAllLoanList]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetBuyerInformationResult>> spGetBuyerInformationAsync(long? BuyerId, long? UnitId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BuyerId",
                    Value = BuyerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "UnitId",
                    Value = UnitId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetBuyerInformationResult>("EXEC @returnValue = [dbo].[spGetBuyerInformation] @BuyerId, @UnitId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetLoanerDropdownResult>> spGetLoanerDropdownAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetLoanerDropdownResult>("EXEC @returnValue = [dbo].[spGetLoanerDropdown]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
